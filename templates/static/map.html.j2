{% extends "templates/static/layout.html.j2" %}

{% block title %}Map{% endblock %}
{% block head %}
  <script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
{% endblock %}

{% block content %}
  <h1>Map</h1>
  <p>
    Map of the mesh as seen by <b>KE-R</b> (!4355f528).
  </p>
  <p>Last updated: {{ timestamp.astimezone(zoneinfo).strftime('%Y-%m-%d %H:%M:%S %z') }}</p>

  <div id="map" class="map"></div>
  <div id="popup" class="ol-popup">
    <a href="#" id="popup-closer" class="ol-popup-closer"></a>
    <div id="popup-content"></div>
  </div>

  <script type="module">
    async function reverseGeocode(lon, lat) {
      return fetch('http://nominatim.openstreetmap.org/reverse?format=json&lon=' + lon + '&lat=' + lat)
        .then(function(response) {
          return response.json();
        }).then(function(json) {
          console.log(json);
          return json;
        });
    }

    const default_position = {
      latitude: 38.5816,
      longitude: -121.4944,
    };
    var server_position = null;
    {% if 'position' in server_node and server_node.position %}
      server_position = {
        latitude: {{ server_node.position.latitude_i / 10000000 }},
        longitude: {{ server_node.position.longitude_i / 10000000 }},
      };
    {% else %}
      server_position = default_position;
    {% endif %}

    const map = new ol.Map({
      layers: [
        new ol.layer.Tile({
          source: new ol.source.OSM(),
        }),
      ],
      target: 'map',
      view: new ol.View({
        center: ol.proj.fromLonLat([server_position.longitude, server_position.latitude]),
        zoom: 8.3,
      }),
    });

    var defaultStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 10,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 255, 0.1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'blue',
          width: 1
        })
      })
    });

    const features = [
      {% for id, node in nodes.items() %}
        {% if node.position is defined and node.position %}
          new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.fromLonLat([{{ node.position.longitude_i / 10000000 }}, {{ node.position.latitude_i / 10000000 }}])),
            node: {
              id: '{{ id }}',
              shortname: '{{ node.shortname }}',
              longname: '{{ node.longname }}',
              last_seen: '{{ node.last_seen }}',
              position: [{{ node.position.longitude_i / 10000000 }}, {{ node.position.latitude_i / 10000000 }}],
            },
          }),
        {% endif %}
      {% endfor %}
    ];

    const layer = new ol.layer.Vector({
      style: defaultStyle,
      source: new ol.source.Vector({
        features: features
      })
    });
    map.addLayer(layer);

    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var overlay = new ol.Overlay({
      element: container,
      autoPan: true,
      autoPanAnimation: {
          duration: 250
      }
    });
    map.addOverlay(overlay);

    var selectedStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 10,
        fill: new ol.style.Fill({
          color: 'rgba(255, 0, 0, 0.1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'red',
          width: 1
        })
      })
    });
    var select = new ol.interaction.Select({
      condition: ol.events.condition.click,
      style: selectedStyle
    });
    map.addInteraction(select);

    closer.onclick = function() {
      select.getFeatures().clear();
      overlay.setPosition(undefined);
      closer.blur();
      return false;
    };

    map.on('singleclick', async function (event) {
      if (map.hasFeatureAtPixel(event.pixel) === true) {
        var coordinate = event.coordinate;
        var feature = map.forEachFeatureAtPixel(event.pixel, function(feature) {
          return feature;
        });
        if (feature) {
          var properties = feature.getProperties();
          var node = properties.node;
          console.log(node);
          var address = await reverseGeocode(node.position[0], node.position[1]);
          var display_name = [address.address.town, address.address.city, address.address.county, address.address.state, address.address.country].filter(Boolean).join(', ');
          content.innerHTML = '<b>' + node.longname + '</b><br/>'
            + node.shortname + ' / ' + node.id + '<br/><br/>'
            + '<b>Position</b><br/>' + node.position + '<br/><br/>'
            + '<b>Location</b><br/>' + display_name + '<br/><br/>'
            + '<b>Last Seen</b><br/>' + node.last_seen + '<br/><br/>';
          overlay.setPosition(ol.proj.fromLonLat(node.position));
        } else {
          content.innerHTML = '<b>Unknown</b>';
          overlay.setPosition(coordinate);
        }
      } else {
        overlay.setPosition(undefined);
        closer.blur();
      }
    });
  </script>

  <style>
    #map {
      height: 100%;
      width: 100%;
    }
    .ol-popup {
      position: absolute;
      background-color: white;
      box-shadow: 0 1px 4px rgba(0,0,0,0.2);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #cccccc;
      bottom: 12px;
      left: -50px;
      min-width: 280px;
    }
    .ol-popup:after, .ol-popup:before {
      top: 100%;
      border: solid transparent;
      content: " ";
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
    }
    .ol-popup:after {
      border-top-color: white;
      border-width: 10px;
      left: 48px;
      margin-left: -10px;
    }
    .ol-popup:before {
      border-top-color: #cccccc;
      border-width: 11px;
      left: 48px;
      margin-left: -11px;
    }
    .ol-popup-closer {
      text-decoration: none;
      position: absolute;
      top: 2px;
      right: 8px;
    }
    .ol-popup-closer:after {
      content: "x";
    }
  </style>
{% endblock %}
